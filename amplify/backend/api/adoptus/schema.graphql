"""
Secure schema: Cognito-only. No public/apiKey access.
Owners manage their own data; admins can read all.
"""

type Post @model @auth(rules: [
  { allow: owner, ownerField: "owner", identityClaim: "cognito:sub" },
  { allow: groups, groups: ["admin"], operations: [read] }
]) {
  id: ID!
  owner: ID
  image: String!
  type: String!
  title: String!
  description: String!
  price: Float!
  latitude: Float!
  longitude: Float!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type UserProfile @model @auth(rules: [
  { allow: owner, ownerField: "owner", identityClaim: "cognito:sub" },
  { allow: groups, groups: ["admin"], operations: [read] }
]) {
  id: ID!
  owner: ID!
  username: String @index(name: "byUsername", queryField: "userProfilesByUsername")
  email: AWSEmail
  name: String
  birthdate: AWSDate
  city: String
  state: String
  country: String
  pictureKey: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}

type UserActivity @model @auth(rules: [
  { allow: owner, ownerField: "owner", identityClaim: "cognito:sub" },
  { allow: groups, groups: ["admin"], operations: [read] }
]) {
  id: ID!
  owner: ID!
  event: String!
  metadata: AWSJSON
  timestamp: AWSDateTime!
}

type Pet @model @auth(rules: [
  { allow: owner, ownerField: "owner", identityClaim: "cognito:sub" },
  { allow: groups, groups: ["admin"], operations: [read] }
]) {
  id: ID!
  owner: ID!
  petType: String
  petName: String
  breed: String
  age: String
  gender: String
  size: String
  color: String
  vaccinated: Boolean
  spayedNeutered: Boolean
  microchipped: Boolean
  description: String
  ownerFirstName: String
  ownerLastName: String
  ownerEmail: AWSEmail
  ownerPhone: String
  address: String
  city: String
  state: String
  zip: String
  specialNeeds: String
  preferences: String
  adoptionFee: String
  availableDate: AWSDate
  photoKeys: [String]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}


# Messaging models
type Conversation @model @auth(rules: [
  { allow: owner, ownerField: "members", identityClaim: "cognito:sub", operations: [create, read, update, delete] },
  { allow: groups, groups: ["admin"], operations: [read] }
]) {
  id: ID!
  members: [String!]!
  petId: ID
  petName: String
  lastMessageAt: AWSDateTime
  lastMessageText: String
}

type Message @model
@auth(rules: [
  { allow: owner, ownerField: "owner", identityClaim: "cognito:sub", operations: [create, read, update, delete] },
  { allow: owner, ownerField: "participants", identityClaim: "cognito:sub", operations: [read] },
  { allow: groups, groups: ["admin"], operations: [read] }
]) {
  id: ID!
  conversationID: ID! @index(name: "byConversation", queryField: "messagesByConversation", sortKeyFields: ["createdAt"]) 
  owner: ID!
  participants: [String!]!
  body: String!
  createdAt: AWSDateTime
}


"""
Tracks per-user read position for a conversation
"""
type ConversationRead @model @auth(rules: [
  { allow: owner, ownerField: "userId", identityClaim: "cognito:sub", operations: [create, read, update, delete] },
  { allow: groups, groups: ["admin"], operations: [read] }
]) {
  id: ID!
  conversationID: ID!
  userId: ID!
  lastReadAt: AWSDateTime
}
